/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ioc.london;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class olympians extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -762293391043323227L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"olympians\",\"namespace\":\"ioc.london\",\"fields\":[{\"name\":\"first_name\",\"type\":\"string\",\"doc\":\"First Name of Athlete\"},{\"name\":\"last_name\",\"type\":\"string\",\"doc\":\"Last Name of Athlete\"},{\"name\":\"sport\",\"type\":\"string\",\"doc\":\"Sport that they play\"},{\"name\":\"nation\",\"type\":\"string\",\"doc\":\"The nation the olympian represents\",\"default\":\"unattached\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<olympians> ENCODER =
      new BinaryMessageEncoder<olympians>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<olympians> DECODER =
      new BinaryMessageDecoder<olympians>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<olympians> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<olympians> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<olympians> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<olympians>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this olympians to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a olympians from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a olympians instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static olympians fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** First Name of Athlete */
  @Deprecated public java.lang.CharSequence first_name;
  /** Last Name of Athlete */
  @Deprecated public java.lang.CharSequence last_name;
  /** Sport that they play */
  @Deprecated public java.lang.CharSequence sport;
  /** The nation the olympian represents */
  @Deprecated public java.lang.CharSequence nation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public olympians() {}

  /**
   * All-args constructor.
   * @param first_name First Name of Athlete
   * @param last_name Last Name of Athlete
   * @param sport Sport that they play
   * @param nation The nation the olympian represents
   */
  public olympians(java.lang.CharSequence first_name, java.lang.CharSequence last_name, java.lang.CharSequence sport, java.lang.CharSequence nation) {
    this.first_name = first_name;
    this.last_name = last_name;
    this.sport = sport;
    this.nation = nation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first_name;
    case 1: return last_name;
    case 2: return sport;
    case 3: return nation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first_name = (java.lang.CharSequence)value$; break;
    case 1: last_name = (java.lang.CharSequence)value$; break;
    case 2: sport = (java.lang.CharSequence)value$; break;
    case 3: nation = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return First Name of Athlete
   */
  public java.lang.CharSequence getFirstName() {
    return first_name;
  }


  /**
   * Sets the value of the 'first_name' field.
   * First Name of Athlete
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.first_name = value;
  }

  /**
   * Gets the value of the 'last_name' field.
   * @return Last Name of Athlete
   */
  public java.lang.CharSequence getLastName() {
    return last_name;
  }


  /**
   * Sets the value of the 'last_name' field.
   * Last Name of Athlete
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.last_name = value;
  }

  /**
   * Gets the value of the 'sport' field.
   * @return Sport that they play
   */
  public java.lang.CharSequence getSport() {
    return sport;
  }


  /**
   * Sets the value of the 'sport' field.
   * Sport that they play
   * @param value the value to set.
   */
  public void setSport(java.lang.CharSequence value) {
    this.sport = value;
  }

  /**
   * Gets the value of the 'nation' field.
   * @return The nation the olympian represents
   */
  public java.lang.CharSequence getNation() {
    return nation;
  }


  /**
   * Sets the value of the 'nation' field.
   * The nation the olympian represents
   * @param value the value to set.
   */
  public void setNation(java.lang.CharSequence value) {
    this.nation = value;
  }

  /**
   * Creates a new olympians RecordBuilder.
   * @return A new olympians RecordBuilder
   */
  public static ioc.london.olympians.Builder newBuilder() {
    return new ioc.london.olympians.Builder();
  }

  /**
   * Creates a new olympians RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new olympians RecordBuilder
   */
  public static ioc.london.olympians.Builder newBuilder(ioc.london.olympians.Builder other) {
    if (other == null) {
      return new ioc.london.olympians.Builder();
    } else {
      return new ioc.london.olympians.Builder(other);
    }
  }

  /**
   * Creates a new olympians RecordBuilder by copying an existing olympians instance.
   * @param other The existing instance to copy.
   * @return A new olympians RecordBuilder
   */
  public static ioc.london.olympians.Builder newBuilder(ioc.london.olympians other) {
    if (other == null) {
      return new ioc.london.olympians.Builder();
    } else {
      return new ioc.london.olympians.Builder(other);
    }
  }

  /**
   * RecordBuilder for olympians instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<olympians>
    implements org.apache.avro.data.RecordBuilder<olympians> {

    /** First Name of Athlete */
    private java.lang.CharSequence first_name;
    /** Last Name of Athlete */
    private java.lang.CharSequence last_name;
    /** Sport that they play */
    private java.lang.CharSequence sport;
    /** The nation the olympian represents */
    private java.lang.CharSequence nation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ioc.london.olympians.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.last_name)) {
        this.last_name = data().deepCopy(fields()[1].schema(), other.last_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sport)) {
        this.sport = data().deepCopy(fields()[2].schema(), other.sport);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nation)) {
        this.nation = data().deepCopy(fields()[3].schema(), other.nation);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing olympians instance
     * @param other The existing instance to copy.
     */
    private Builder(ioc.london.olympians other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.first_name)) {
        this.first_name = data().deepCopy(fields()[0].schema(), other.first_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.last_name)) {
        this.last_name = data().deepCopy(fields()[1].schema(), other.last_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sport)) {
        this.sport = data().deepCopy(fields()[2].schema(), other.sport);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nation)) {
        this.nation = data().deepCopy(fields()[3].schema(), other.nation);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'first_name' field.
      * First Name of Athlete
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return first_name;
    }


    /**
      * Sets the value of the 'first_name' field.
      * First Name of Athlete
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public ioc.london.olympians.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.first_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * First Name of Athlete
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first_name' field.
      * First Name of Athlete
      * @return This builder.
      */
    public ioc.london.olympians.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * Last Name of Athlete
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return last_name;
    }


    /**
      * Sets the value of the 'last_name' field.
      * Last Name of Athlete
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public ioc.london.olympians.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.last_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * Last Name of Athlete
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'last_name' field.
      * Last Name of Athlete
      * @return This builder.
      */
    public ioc.london.olympians.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sport' field.
      * Sport that they play
      * @return The value.
      */
    public java.lang.CharSequence getSport() {
      return sport;
    }


    /**
      * Sets the value of the 'sport' field.
      * Sport that they play
      * @param value The value of 'sport'.
      * @return This builder.
      */
    public ioc.london.olympians.Builder setSport(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sport = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sport' field has been set.
      * Sport that they play
      * @return True if the 'sport' field has been set, false otherwise.
      */
    public boolean hasSport() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sport' field.
      * Sport that they play
      * @return This builder.
      */
    public ioc.london.olympians.Builder clearSport() {
      sport = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nation' field.
      * The nation the olympian represents
      * @return The value.
      */
    public java.lang.CharSequence getNation() {
      return nation;
    }


    /**
      * Sets the value of the 'nation' field.
      * The nation the olympian represents
      * @param value The value of 'nation'.
      * @return This builder.
      */
    public ioc.london.olympians.Builder setNation(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.nation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nation' field has been set.
      * The nation the olympian represents
      * @return True if the 'nation' field has been set, false otherwise.
      */
    public boolean hasNation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nation' field.
      * The nation the olympian represents
      * @return This builder.
      */
    public ioc.london.olympians.Builder clearNation() {
      nation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public olympians build() {
      try {
        olympians record = new olympians();
        record.first_name = fieldSetFlags()[0] ? this.first_name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.last_name = fieldSetFlags()[1] ? this.last_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sport = fieldSetFlags()[2] ? this.sport : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.nation = fieldSetFlags()[3] ? this.nation : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<olympians>
    WRITER$ = (org.apache.avro.io.DatumWriter<olympians>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<olympians>
    READER$ = (org.apache.avro.io.DatumReader<olympians>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.first_name);

    out.writeString(this.last_name);

    out.writeString(this.sport);

    out.writeString(this.nation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);

      this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);

      this.sport = in.readString(this.sport instanceof Utf8 ? (Utf8)this.sport : null);

      this.nation = in.readString(this.nation instanceof Utf8 ? (Utf8)this.nation : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.first_name = in.readString(this.first_name instanceof Utf8 ? (Utf8)this.first_name : null);
          break;

        case 1:
          this.last_name = in.readString(this.last_name instanceof Utf8 ? (Utf8)this.last_name : null);
          break;

        case 2:
          this.sport = in.readString(this.sport instanceof Utf8 ? (Utf8)this.sport : null);
          break;

        case 3:
          this.nation = in.readString(this.nation instanceof Utf8 ? (Utf8)this.nation : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










